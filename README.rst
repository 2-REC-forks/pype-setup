Readme
======

This is 2.0 incarnation of setup tool to install **pype**.

usage
-----

command line arguments
~~~~~~~~~~~~~~~~~~~~~~

Use ``pype`` command to launch and control whole pipeline. Available command
line arguments are:

**--install**: This will install **pype** if it's environment wasn't found.
When something is detected in environment destination directory, installation
will abort unless used with **--force**. That will force install to clean
destination environment.

**--skip** will skip validation of deployment, so if repositories are in
different state then specified in ``deploy.json``, only warning is shown.

**--workstation** will install only python environment of computer, to
proceeding with deployment. As deployment should be installed only once on
some network share.

Installation will download and setup python dependencies and then it will
load ``deploy/deploy.json``. Using this file setup will populate
repositories in ```repos``. If they exists but differs with specified
ones (they are on different branch for example), setup will switch them to
correct one. Only if their working tree is clean. If
there is another directory in ``deploy`` containing ``deploy.json``, it is
then considered as an override and setup will use that.

You can use **--download** to just download required python packages
to ``vendor/packages`` to be used later with **--offline** switch that will
use those downloaded without connecting to internet. Useful in scenarios
where internet connection is unavailable. It will download only packages
specific for current platform so if you need to download packages for linux,
you must be running linux.

**--ignore** switch can be used to ignore inconsistent setup of
repositories when launching **pype**. Useful during development, but
dangerous as it can result in crashes and malfunctions.

**--traydebug** will cause **--ignore** to be se also.

deployment
~~~~~~~~~~

Deployment is driven by configuration in ``deploy/deploy.json`` where
repositories are specified and additional dependecies. It can be overridden
by creating directory inside ``deploy`` and adding customized ``deploy.json``
and its schema there.

tests
-----

Test runner is **pytest**. For example of writing test look into tests
already in ``tests`` directory.
See `pytest reference <https://docs.pytest.org/en/latest/reference.html>`_.

Write your tests in ``tests`` directory inside hierarchy (either in top
level ``tests`` directory) or inside your package. Then
run ``run_tests`` to enter virtual environment and execute **pytest**.

To select specific test, you can use:
``run_tests -k "_test_deploy"`` to run just test named so.

.. todo:: add test running to **pype** command for better control path and
          environment.

coverage
--------

To see actual coverage, use ``pytest --cov=pypeapp`` within virtualenv. To
generate html report, use ``pytest --cov=pypeapp --cov-report=html:coverage``.
That will generate html report into ``coverage`` directory. From there, when
you click on file name, it will display parts of code uncovered by tests.

About code coverage see
`here <https://hackingthelibrary.org/posts/2018-02-09-code-coverage/>`_.

Coverage is configured in ``.coveragerc``

.. todo:: add coverage to **pype** command for better control path and
          environment.

documentation
-------------

Documentation is generated by Sphinx and autodoc. To generate,
run ``make_docs.bat`` or ``make html`` from **docs** directory. Remember,
to run ``make html`` you must be inside correct virtual environment (so it
will use its Sphinx package instead of system one).

Autodoc is configured to use **rst** docstyle, but takes **napoleon** too.

- RST [`reference <https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_]
- Example of `Google Style Python Docstring <http://www.sphinx-doc.org/en/master/usage/extensions/example_google.html#example-google>`_.
- Example of `NumPy Style Python Docstrings <http://www.sphinx-doc.org/en/master/usage/extensions/example_numpy.html#example-numpy>`_.

todo
----
 - Cover more code with tests
 - Write documentation
 - Increase test coverage
